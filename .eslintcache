[{"/Users/zhoraasatryan/Desktop/JS/react_map/src/index.js":"1","/Users/zhoraasatryan/Desktop/JS/react_map/src/components/Map/Map.js":"2"},{"size":305,"mtime":1607500560000,"results":"3","hashOfConfig":"4"},{"size":4668,"mtime":1608036387000,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"16wj0us",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/zhoraasatryan/Desktop/JS/react_map/src/index.js",[],["12","13"],"/Users/zhoraasatryan/Desktop/JS/react_map/src/components/Map/Map.js",["14"],"import React, {Component} from 'react'\r\nimport styles from './map.module.css'\r\nimport mapImg from './COVID-19_Outbreak_Cases_in_Armenia_(Density).svg'\r\n\r\nclass Map extends Component {\r\n\r\n    state = {\r\n        isClicked: false,\r\n        district: undefined\r\n    }\r\n\r\n    render() {\r\n        let viewBox\r\n        let svgClass\r\n        let districts\r\n        let cities\r\n\r\n        if (this.state.isClicked) {\r\n            viewBox = \"0 0 750 750\"\r\n            svgClass = styles.svgFull\r\n\r\n            cities = this.state.district.cities.map(\r\n                (city) => {\r\n                    return (<g>\r\n                                <circle cx={city.cityX}\r\n                                        cy={city.cityY}\r\n                                        r=\"3\"\r\n                                        cityColor = {this.state.district.color}\r\n                                        className={styles.city}\r\n                                />\r\n\r\n                                <text x={Number(city.cityX)}\r\n                                    y={Number(city.cityY) - 10}\r\n\r\n                                    className={styles.cityName}>\r\n\r\n                                    {city.cityName}\r\n                                </text>\r\n                                {/*<line x1 = {city.cityX}*/}\r\n                                {/*      y1 = {city.cityY}*/}\r\n                                {/*      x2 = {this.state.district.capital.fullCapitalX}*/}\r\n                                {/*      y2 = {this.state.district.capital.fullCapitalY}*/}\r\n                                {/*      stroke = \"black\"*/}\r\n                                {/*      className={styles.line}*/}\r\n                                {/*    >*/}\r\n\r\n                                {/*</line>*/}\r\n                            </g>\r\n                    )\r\n                }\r\n            )\r\n\r\n            districts = <svg>\r\n\r\n                            <path onClick={this.handleClick}\r\n                                  key = {this.state.district.name}\r\n                                  className={styles.clicked}\r\n                                  d = {this.state.district.coordsFull} />\r\n\r\n                            {cities}\r\n\r\n                        </svg>\r\n\r\n        } else {\r\n            viewBox = \"0 0 680 680\"\r\n            svgClass = styles.svgState\r\n\r\n            districts = this.props.districts.map(\r\n                    (district) => {\r\n                        return(<svg className={styles.state}>\r\n                                <title>{district.capital.capitalName}</title>\r\n                                    <path onClick={this.handleClick.bind(null, district)}\r\n                                          key = {district.name}\r\n                                          className={styles.statePath}\r\n                                          d = {district.coords}\r\n                                          districtColor = {district.color}/>\r\n\r\n                                    <circle cx={district.capital.capitalX + 100}\r\n                                            cy={district.capital.capitalY}\r\n                                            className={styles.stateCenter}\r\n                                            r=\"2\"/>)\r\n                                        <text\r\n                                        x={Number(district.capital.capitalX)}\r\n                                          y={Number(district.capital.capitalY) - 10}\r\n                                          className={styles.stateName}>\r\n\r\n                                        {district.capital.capitalName}\r\n                                        </text>\r\n                                    <filter id=\"dropShadow\">\r\n                                        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" />\r\n                                        <feOffset dx=\"2\" dy=\"2\" />\r\n                                        <feMerge>\r\n                                            <feMergeNode />\r\n                                            <feMergeNode in=\"SourceGraphic\" />\r\n                                        </feMerge>\r\n                                    </filter>\r\n                                </svg>\r\n                            )\r\n                        })\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n        return(<div className={styles.map}>\r\n            <svg viewBox={viewBox} className={svgClass}>\r\n                        {districts}\r\n            </svg>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    handleClick = (district) => {\r\n        this.setState({\r\n            isClicked: !this.state.isClicked,\r\n            district: district\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport default Map",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":3,"column":8,"nodeType":"21","messageId":"22","endLine":3,"endColumn":14},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-unused-vars","'mapImg' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]